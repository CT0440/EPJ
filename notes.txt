==============================
1. JDBC (Java Database Connectivity)
==============================

► What is JDBC?

JDBC is an API in Java that allows interaction with relational databases
(like MySQL, Oracle, PostgreSQL, etc.) using SQL statements.

► Why use JDBC?

- Send queries to the database
- Insert, retrieve, update, delete data
- Platform-independent
- Built-in Java support (in java.sql package)

► Core Steps to use JDBC:

1. Load and register the JDBC driver
2. Establish a connection using Connection class
3. Create a statement using Statement or PreparedStatement
4. Execute query using executeQuery() or executeUpdate()
5. Process ResultSet (if any)
6. Close the connection

► Required Packages:
- java.sql.*
- javax.sql.* (for advanced use)


==============================
2. JDBC ARCHITECTURE
==============================

JDBC has two layers:

1. JDBC API (used by the Java developer)
2. JDBC Driver (provided by DB vendors)

► Layers:

[Java Application]
     |
[JDBC API]
     |
[JDBC Driver Manager]
     |
[JDBC Driver]
     |
[Database]

► JDBC Driver Types:

1. Type-1: JDBC-ODBC Bridge (Outdated)
2. Type-2: Native API driver (uses native C libraries)
3. Type-3: Network Protocol driver (middleware)
4. Type-4: Thin driver (pure Java — most popular)

► Common JDBC Classes:

- DriverManager
- Connection
- Statement
- PreparedStatement
- ResultSet
- CallableStatement (for stored procedures)


==============================
3. JDBC WITH ORACLE
==============================

► Requirements:
- Oracle Database installed or accessible
- ojdbc8.jar or ojdbc11.jar added to classpath

► JDBC URL format (for Oracle):
jdbc:oracle:thin:@host:port:dbname

► Example:
jdbc:oracle:thin:@localhost:1521:xe

► Sample Code:

import java.sql.*;

public class OracleExample {
    public static void main(String args[]) throws Exception {
        Class.forName("oracle.jdbc.driver.OracleDriver");
        Connection con = DriverManager.getConnection(
          "jdbc:oracle:thin:@localhost:1521:xe", "system", "oracle");

        Statement st = con.createStatement();
        ResultSet rs = st.executeQuery("SELECT * FROM employees");

        while (rs.next()) {
            System.out.println(rs.getString("name"));
        }

        con.close();
    }
}




==============================
4. JDBC WITH MYSQL
==============================

► Requirements:
- MySQL DB installed
- mysql-connector-java-8.x.jar in classpath

► JDBC URL:
jdbc:mysql://localhost:3306/dbname

► Sample Code:

import java.sql.*;

public class MySQLExample {
    public static void main(String args[]) throws Exception {
        Class.forName("com.mysql.cj.jdbc.Driver");

        Connection con = DriverManager.getConnection(
          "jdbc:mysql://localhost:3306/testdb", "root", "password");

        PreparedStatement ps = con.prepareStatement("SELECT * FROM student");
        ResultSet rs = ps.executeQuery();

        while (rs.next()) {
            System.out.println(rs.getInt("id") + " " + rs.getString("name"));
        }

        con.close();
    }
}


==============================
5. MAVEN INTEGRATION WITH ECLIPSE
==============================

► What is Maven?

Maven is a build automation tool used in Java. It manages:
- Project structure
- Dependencies (JARs)
- Compilation, testing, packaging

► Steps to Create Maven Project in Eclipse:

1. Open Eclipse
2. File → New → Maven Project
3. Select archetype: maven-archetype-quickstart
4. Enter:
   - Group ID: com.example
   - Artifact ID: myproject
5. Maven will generate:

project/
 ├── src/main/java
 ├── src/test/java
 ├── pom.xml

► Add dependencies in pom.xml to auto-download JARs

► Build Options:
- mvn clean
- mvn compile
- mvn package
- mvn install


==============================
6. POM.XML (Project Object Model)
==============================

► pom.xml is the heart of a Maven project.
It contains information about the project, build process, and dependencies.

► Structure of POM:

<project>
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.myapp</groupId>
  <artifactId>ServletDemo</artifactId>
  <version>1.0</version>
  <packaging>war</packaging>

  <dependencies>
    <!-- MySQL JDBC Driver -->
    <dependency>
      <groupId>mysql</groupId>
      <artifactId>mysql-connector-java</artifactId>
      <version>8.0.33</version>
    </dependency>

    <!-- Servlet API -->
    <dependency>
      <groupId>jakarta.servlet</groupId>
      <artifactId>jakarta.servlet-api</artifactId>
      <version>6.0.0</version>
      <scope>provided</scope>
    </dependency>
  </dependencies>
</project>

► Tags:

- <groupId>: Unique org name (like domain)
- <artifactId>: Project name
- <version>: Current project version
- <packaging>: jar / war
- <dependencies>: List of all external libraries
